int ST_getsize(int N) {
	int i = 0, size = 1;
	while (size < (N << 1)) 
		size = 1 << (++i);
	return size;
}
int ST_init(int node, int start, int end) {
	if (start == end)
		return tree[node] = arr[start];
	int mid = (start + end) >> 1;
	return tree[node] = ST_init(node << 1, start, mid) + ST_init((node << 1) | 1, mid + 1, end);
}

void ST_update(int node, int start, int end, int index, int diff) {
	if (!(start <= index && index <= end))
		return;
	tree[node] += diff;
	if (start != end) {
		int mid = (start + end) >> 1;
		ST_update(node << 1, start, mid, index, diff);
		ST_update((node << 1) | 1, mid + 1, end, index, diff);
	}
}
int ST_sum(int node, int start, int end, int left, int right) {
	if (left > end || right < start)
		return 0;
	if (left <= start && end <= right)
		return tree[node];
	int mid = (start + end) >> 1;
	return ST_sum(node << 1, start, mid, left, right) + ST_sum((node << 1) | 1, mid + 1, end, left, right);
}
